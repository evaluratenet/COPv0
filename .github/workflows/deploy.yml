name: Deploy to Render

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  RENDER_API_URL: https://api.render.com/v1
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: circle-of-peers

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd ai_service
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        cd ai_service
        python -m pytest tests/ -v
    
    - name: Lint code
      run: |
        cd ai_service
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Discourse image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.discourse
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/discourse:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/discourse:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Landing page image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.landing
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/landing:${{ github.sha }}
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/landing:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render Staging
      run: |
        echo "Deploying to staging environment..."
        
        # Update Render service with new image
        curl -X PATCH "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/discourse:${{ github.sha }}"
          }'
        
        # Trigger deployment
        curl -X POST "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json"
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
        # Check deployment status
        DEPLOY_STATUS=$(curl -s "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_STAGING_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" | jq -r '.deploys[0].status')
        
        if [ "$DEPLOY_STATUS" != "live" ]; then
          echo "Deployment failed with status: $DEPLOY_STATUS"
          exit 1
        fi
    
    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Add your migration commands here
        # Example: docker exec discourse-service bundle exec rake db:migrate
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # Wait for service to be ready
        sleep 30
        
        # Check if the service is responding
        HEALTH_CHECK_URL="${{ secrets.STAGING_URL }}/health"
        for i in {1..10}; do
          if curl -f "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 10
        done
        
        if [ $i -eq 10 ]; then
          echo "Health check failed after 10 attempts"
          exit 1
        fi

  deploy-production:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render Production
      run: |
        echo "Deploying to production environment..."
        
        # Update Render service with new image
        curl -X PATCH "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/discourse:${{ github.sha }}"
          }'
        
        # Trigger deployment
        curl -X POST "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json"
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
        # Check deployment status
        DEPLOY_STATUS=$(curl -s "${{ env.RENDER_API_URL }}/services/${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" | jq -r '.deploys[0].status')
        
        if [ "$DEPLOY_STATUS" != "live" ]; then
          echo "Deployment failed with status: $DEPLOY_STATUS"
          exit 1
        fi
    
    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        # Add your migration commands here
        # Example: docker exec discourse-service bundle exec rake db:migrate
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # Wait for service to be ready
        sleep 30
        
        # Check if the service is responding
        HEALTH_CHECK_URL="${{ secrets.PRODUCTION_URL }}/health"
        for i in {1..10}; do
          if curl -f "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 10
        done
        
        if [ $i -eq 10 ]; then
          echo "Health check failed after 10 attempts"
          exit 1
        fi
    
    - name: Update DNS and SSL
      run: |
        echo "Updating DNS and SSL certificates..."
        # Add SSL certificate renewal if needed
        # Example: certbot renew

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "Environment: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
        else
          echo "❌ Deployment failed!"
          echo "Environment: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Failed at: $(date)"
        fi
    
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Circle of Peers Deployment
          Environment: ${{ github.ref_name }}
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Deployed by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - uses: actions/checkout@v3
    
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment..."
        
        if [ "${{ github.ref_name }}" == "staging" ]; then
          SERVICE_ID="${{ secrets.RENDER_STAGING_SERVICE_ID }}"
        else
          SERVICE_ID="${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}"
        fi
        
        # Rollback to previous deployment
        curl -X POST "${{ env.RENDER_API_URL }}/services/$SERVICE_ID/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": "do_not_clear"
          }'
        
        echo "Rollback initiated" 
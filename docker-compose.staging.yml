version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cop_postgres_staging
    environment:
      - POSTGRES_DB=discourse
      - POSTGRES_USER=discourse
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-discourse_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    ports:
      - "5432:5432"
    networks:
      - cop_staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U discourse"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cop_redis_staging
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
    networks:
      - cop_staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI AI Service
  ai_service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: cop_ai_service_staging
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://discourse:${POSTGRES_PASSWORD:-discourse_password}@postgres:5432/discourse
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
      - DISCOURSE_API_KEY=${DISCOURSE_API_KEY:-your_discourse_api_key_here}
      - DISCOURSE_API_USERNAME=system
      - DISCOURSE_BASE_URL=http://discourse:80
      - LOG_LEVEL=info
      - ENVIRONMENT=staging
      - MAX_WORKERS=4
      - WORKER_TIMEOUT=30
    volumes:
      - ./ai_service:/app
      - ./logs/ai_service:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - cop_staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cop_nginx_staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - ai_service
    networks:
      - cop_staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: cop_prometheus_staging
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - cop_staging_network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: cop_grafana_staging
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-secure_grafana_password_2024}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cop_staging_network
    restart: unless-stopped

  # Mailtrap for email testing
  mailtrap:
    image: axllent/mailpit:latest
    container_name: cop_mailtrap_staging
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - cop_staging_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  cop_staging_network:
    driver: bridge 